{"Name":"ServiceStack.Text","Id":1115,"Alias":"servicestacktext","Description":"ServiceStack.Text is an **independent, dependency-free** serialization library that contains ServiceStack\u0027s text processing functionality, including:\n\n* [JsonSerializer](http://www.servicestack.net/mythz_blog/?p=344)\n* [TypeSerializer (JSV-Format)](https://github.com/ServiceStack/ServiceStack.Text/wiki/JSV-Format)\n* CsvSerializer\n* [T.Dump extension method](http://www.servicestack.net/mythz_blog/?p=202)\n* StringExtensions - Xml/Json/Csv/Url encoding, BaseConvert, Rot13, Hex escape, etc.\n* Stream, Reflection, List, DateTime, etc extensions and utils\n\n# Simple API\n\nLike most of the interfaces in Service Stack, the API is simple. Methods that you would commonly use include:\n\n    string TypeSerializer.SerializeToString\u003cT\u003e(T value)\n    void TypeSerializer.SerializeToWriter\u003cT\u003e(T value, TextWriter writer)\n\n    T TypeSerializer.DeserializeFromString\u003cT\u003e(string value)\n    T TypeSerializer.DeserializeFromReader\u003cT\u003e(TextReader reader)\n\nWhere *T* can be any .NET POCO type. That\u0027s all there is - the API was intentionally left simple :)\n    \n### Dynamic JSON parsing API\n\n    JsonObject.Parse()\n    JsonArrayObjects.Parse()\n\n### Extension Methods\n\n    T FromJson()\n    string ToJson(T)\n\n    T FromJsv()\n    string ToJsv(T)\n\nDump / Diagnostic Extensions:\n\n    T Dump()\n    T Print()\n    T PrintDump()\n    string Fmt(args)\n\nURL Extensions:\n\n    string GetStringFromUrl()\n    string GetJsonFromUrl()\n    string GetResponseStatus()\n    string UrlEncode() / UrlDecode()\n    string HexEscape() / HexUnescape()\n    string UrlFormat() / AppendPath() / AppendPaths() / WithTrailingSlash()    \n    string WithoutExtension() / ParentDirectory() / ReadAllText()\n\nStream Extensions:\n\n    Stream WriteTo(Stream) / CopyTo()\n    StreamReader ReadLines()\n    Stream ReadFully() / ReadExactly()\n\nString Utils:\n\n    string SplitOnFirst() / SplitOnLast()\n    string IndexOfAny()\n    string StripHtml() / ToCamelCase()\n    string SafeSubstring()\n    string ToUtf8Bytes() / FromUtf8Bytes()\n\nmore String, Reflection, List, Dictionary, DateTime extensions, and More...","Version":"3.9.61.0","Summary":".NET\u0027s fastest JSON, JSV and CSV Text Serializers","QuickStart":"For simple conversions to and from JSON strings and .NET objects, ServiceStack.Text provides handy extension methods to Deserialize and Serialize Objects.\n\n```csharp\nusing ServiceStack.Text;\n...\n\npublic class Person\n{\n    public string Name { get; set; }\n    public string LastName { get; set; }\n}\n\nvoid PersonToJsonToPersonExample ()\n{\n    // Object to Json\n\tvar person = new Person { Name = \"John\", LastName = \"Doe\" };\n\tvar json = person.ToJson ();\n\tConsole.WriteLine (\"JSON representation of person: {0}\", json);\n\n\t//Json to Object\n\tvar john = json.FromJson\u003cPerson\u003e ();\n\tConsole.WriteLine (\"Name: {0} LastName: {1}\", john.Name, john.LastName);\n}\n```\n\n## T.Dump() Extension method\nAnother useful library to have in your .NET toolbox is the [T.Dump() Extension Method](http://www.servicestack.net/mythz_blog/?p=202). Under the hood it uses a *Pretty Print* Output of the JSV Format to recursively dump the contents of any .NET object. Example usage and output: \n\n\tvar model = new TestModel();\n\tConsole.WriteLine(model.Dump());\n\n\t//Example Output\n\t{\n\t\tInt: 1,\n\t\tString: One,\n\t\tDateTime: 2010-04-11,\n\t\tGuid: c050437f6fcd46be9b2d0806a0860b3e,\n\t\tEmptyIntList: [],\n\t\tIntList:\n\t\t[\n\t\t\t1,\n\t\t\t2,\n\t\t\t3\n\t\t],\n\t\tStringList:\n\t\t[\n\t\t\tone,\n\t\t\ttwo,\n\t\t\tthree\n\t\t],\n\t\tStringIntMap:\n\t\t{\n\t\t\ta: 1,\n\t\t\tb: 2,\n\t\t\tc: 3\n\t\t}\n\t}\n\n# ServiceStack\u0027s JsonSerializer\n\nServiceStack\u0027s JsonSerializer is optimized for serializing C# POCO types in and out of JSON as fast, compact and cleanly as possible. In most cases C# objects serializes as you would expect them to without added json extensions or serializer-specific artefacts.\n\nJsonSerializer provides a simple API that allows you to serialize any .NET generic or runtime type into a string, TextWriter/TextReader or Stream.\n\n### Serialization API\n\n\tstring SerializeToString\u003cT\u003e(T)\n\tvoid SerializeToWriter\u003cT\u003e(T, TextWriter)\n\tvoid SerializeToStream\u003cT\u003e(T, Stream)\n\tstring SerializeToString(object, Type)\n\tvoid SerializeToWriter(object, Type, TextWriter)\n\tvoid SerializeToStream(object, Type, Stream)\n\n### Deserialization API\n\n\tT DeserializeFromString\u003cT\u003e(string)\n\tT DeserializeFromReader\u003cT\u003e(TextReader)\n\tobject DeserializeFromString(string, Type)\n\tobject DeserializeFromReader(reader, Type)\n\tobject DeserializeFromStream(Type, Stream)\n\tT DeserializeFromStream\u003cT\u003e(Stream)\n\n### Extension methods\n\n\tstring ToJson\u003cT\u003e(this T)\n\tT FromJson\u003cT\u003e(this string)\n\nConvenient **ToJson/FromJson** extension methods are also included reducing the amount of code required, e.g:\n\n\tnew []{ 1, 2, 3 }.ToJson()   //= [1,2,3]\n\t\"[1,2,3]\".FromJson\u003cint[]\u003e()  //= int []{ 1, 2, 3 }\n\n## JSON Format \n\nJSON is a lightweight text serialization format with a spec that\u0027s so simple that it fits on one page: [http://www.json.org](json.org).\n\nThe only valid values in JSON are:\n\n  * string\n  * number\n  * object\n  * array\n  * true\n  * false\n  * null\n\nWhere most allowed values are scalar and the only complex types available are objects and arrays. Although limited, the above set of types make a good fit and can express most programming data structures.\n\n### number, true, false types\n\nAll C# boolean and numeric data types are stored as-is without quotes.\n\n### null type\n\nFor the most compact output null values are omitted from the serialized by default. If you want to include null values set the global configuration:\n\n\tJsConfig.IncludeNullValues = true;\n\n### string type\n\nAll other scalar values are stored as strings that are surrounded with double quotes.\n\n### C# Structs and Value Types\n\nBecause a C# struct is a value type whose public properties are normally just convenience properties around a single scalar value, they are ignored instead the **TStruct.ToString()** method is used to serialize and either the **static TStruct.ParseJson()**/**static TStruct.ParseJsv()** methods or **new TStruct(string)** constructor will be used to deserialize the value type if it exists.\n\n### array type\n\nAny List, Queue, Stack, Array, Collection, Enumerables including custom enumerable types are stored in exactly the same way as a JavaScript array literal, i.e:\n\n\t[1,2,3,4,5]\n\nAll elements in an array must be of the same type. If a custom type is both an IEnumerable and has properties it will be treated as an array and the extra properties will be ignored.\n\n### object type\n\nThe JSON object type is the most flexible and is how most complex .NET types are serialized. The JSON object type is a key-value pair JavaScript object literal where the key is always a double-quoted string.\n\nAny IDictionary is serialized into a standard JSON object, i.e:\n\n\t{\"A\":1,\"B\":2,\"C\":3,\"D\":4}\n\nWhich happens to be the same as C# POCO types (inc. Interfaces) with the values:\n\n`new MyClass { A=1, B=2, C=3, D=4 }`\n\n\t{\"A\":1,\"B\":2,\"C\":3,\"D\":4}\n\nOnly public properties on reference types are serialized with the C# Property Name used for object key and the Property Value as the value. At the moment it is not possible to customize the Property Name.\n\nJsonSerializer also supports serialization of anonymous types in much the same way:\n\n`new { A=1, B=2, C=3, D=4 }`\n\n\t{\"A\":1,\"B\":2,\"C\":3,\"D\":4}\n\n\n## Custom Serialization\n\nAlthough JsonSerializer is optimized for serializing .NET POCO types, it still provides some options to change the convention-based serialization routine.\n\n### Using Structs to Customize JSON\n\nThis makes it possible to customize the serialization routine and provide an even more compact wire format. \n\nE.g. Instead of using a JSON object to represent a point \n\n\t{ Width=20, Height=10 }\n\t\nYou could use a struct and reduce it to just: \n\n\t\"20x10\" \n\nBy overriding **ToString()** and providing a static **Size ParseJson()** method:\n\n\tpublic struct Size\n\t{\n\t\tpublic double Width { get; set; }\n\t\tpublic double Height { get; set; }\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn Width + \"x\" + Height;\n\t\t}\n\n\t\tpublic static Size ParseJson(string json)\n\t\t{\n\t\t\tvar size = json.Split(\u0027x\u0027);\n\t\t\treturn new Size { \n\t\t\t\tWidth = double.Parse(size[0]), \n\t\t\t\tHeight = double.Parse(size[1]) \n\t\t\t};\n\t\t}\n\t}\n\nWhich would change it to the more compact JSON output:\n\n\tnew Size { Width = 20, Height = 10 }.ToJson() // = \"20x10\"\n\nThat allows you to deserialize it back in the same way:\n\n\tvar size = \"20x10\".FromJson\u003cSize\u003e(); \n\n### Using Custom IEnumerable class to serialize a JSON array\n\nIn addition to using a Struct you can optionally use a custom C# IEnumerable type to provide a strong-typed wrapper around a JSON array:\n\n\tpublic class Point : IEnumerable\n\t{\n\t\tdouble[] points = new double[2];\n\t\n\t\tpublic double X \n\t\t{\n\t\t\tget { return points[0]; }\n\t\t\tset { points[0] = value; }\n\t\t}\n\t\n\t\tpublic double Y\n\t\t{\n\t\t\tget { return points[1]; }\n\t\t\tset { points[1] = value; }\n\t\t}\n\t\n\t\tpublic IEnumerator GetEnumerator()\n\t\t{\n\t\t\tforeach (var point in points) \n\t\t\t\tyield return point;\n\t\t}\n\t}\n\nWhich serializes the Point into a compact JSON array:\n\n\tnew Point { X = 1, Y = 2 }.ToJson() // = [1,2]\n\n### Custom Serialization Routines\n\nIf you can\u0027t change the definition of a ValueType (e.g. because its in the BCL), you can assign a custom serialization /\ndeserialization routine to use instead. E.g. here\u0027s how you can add support for `System.Drawing.Color`:\n\n    JsConfig\u003cSystem.Drawing.Color\u003e.SerializeFn = c =\u003e c.ToString().Replace(\"Color \",\"\").Replace(\"[\",\"\").Replace(\"]\",\"\");\n    JsConfig\u003cSystem.Drawing.Color\u003e.DeSerializeFn = System.Drawing.Color.FromName;\n\n## Custom Deserialization\n\nBecause the same wire format shared between Dictionaries, POCOs and anonymous types, in most cases what you serialize with one type can be deserialized with another, i.e. an Anonymous type can be deserialized back into a Dictionary\u003cstring,string\u003e which can be deserialized into a strong-typed POCO and vice-versa.\n\nAlthough the JSON Serializer is best optimized for serializing and deserializing .NET types, it\u0027s flexible enough to consume 3rd party JSON apis although this generally requires custom de-serialization to convert it into an idiomatic .NET type.\n\n[GitHubRestTests.cs](https://github.com/ServiceStack/ServiceStack.Text/blob/master/tests/ServiceStack.Text.Tests/UseCases/GitHubRestTests.cs)\n\n  1. Using [JsonObject](https://github.com/ServiceStack/ServiceStack.Text/blob/master/src/ServiceStack.Text/JsonObject.cs)\n  2. Using Generic .NET Collection classes\n  3. Using Customized DTO\u0027s in the shape of the 3rd party JSON response\n\n[CentroidTests](https://github.com/ServiceStack/ServiceStack.Text/blob/master/tests/ServiceStack.Text.Tests/UseCases/CentroidTests.cs) is another example that uses the JsonObject to parse a complex custom JSON response. \n\n\n#TypeSerializer Details (JSV Format)\n\nOut of the box .NET provides a fairly quick but verbose Xml DataContractSerializer or a slightly more compact but slower JsonDataContractSerializer. \nBoth of these options are fragile and likely to break with any significant schema changes. \nTypeSerializer addresses these shortcomings by being both smaller and significantly faster than the most popular options. \nIt\u0027s also more resilient, e.g. a strongly-typed POCO object can be deserialized back into a loosely-typed string Dictionary and vice-versa.\n\nWith that in mind, TypeSerializer\u0027s main features are:\n\n - Fastest and most compact text-serializer for .NET\n - Human readable and writeable, self-describing text format\n - Non-invasive and configuration-free\n - Resilient to schema changes\n - Serializes / De-serializes any .NET data type (by convention)\n   + Supports custom, compact serialization of structs by overriding `ToString()` and `static T Parse(string)` methods\n   + Can serialize inherited, interface or \u0027late-bound objects\u0027 data types\n   + Respects opt-in DataMember custom serialization for DataContract dto types.\n\nThese characteristics make it ideal for use anywhere you need to store or transport .NET data-types, e.g. for text blobs in a ORM, data in and out of a key-value store or as the text-protocol in .NET to .NET web services.  \n \nAs such, it\u0027s utilized within ServiceStack\u0027s other components:\n - OrmLite - to store complex types on table models as text blobs in a database field and\n - [ServiceStack.Redis](https://github.com/ServiceStack/ServiceStack.Redis) - to store rich POCO data types into the very fast [redis](http://code.google.com/p/redis) instances.\n\nYou may also be interested in the very useful [T.Dump() extension method](http://www.servicestack.net/mythz_blog/?p=202) for recursively viewing the contents of any C# POCO Type.\n\n---\n\n# JSV Text Format (JSON + CSV)\n\nType Serializer uses a hybrid CSV-style escaping + JavaScript-like text-based format that is optimized for both size and speed. I\u0027m naming this JSV-format (i.e. JSON + CSV) \n\nIn many ways it is similar to JavaScript, e.g. any List, Array, Collection of ints, longs, etc are stored in exactly the same way, i.e:\n\t[1,2,3,4,5]\n\nAny IDictionary is serialized like JavaScript, i.e:\n\t{A:1,B:2,C:3,D:4}\n\nWhich also happens to be the same as C# POCO class with the values \n\n`new MyClass { A=1, B=2, C=3, D=4 }`\n\n\t{A:1,B:2,C:3,D:4}\n\nJSV is *white-space significant*, which means normal string values can be serialized without quotes, e.g: \n\n`new MyClass { Foo=\"Bar\", Greet=\"Hello World!\"}` is serialized as:\n\n\t{Foo:Bar,Greet:Hello World!}\n\n\n### CSV escaping\n\nAny string with any of the following characters: `[]{},\"`\nis escaped using CSV-style escaping where the value is wrapped in double quotes, e.g:\n\n`new MyClass { Name = \"Me, Junior\" }` is serialized as:\n\t\n\t{Name:\"Me, Junior\"}\n\nA value with a double-quote is escaped with another double quote e.g:\n\n`new MyClass { Size = \"2\\\" x 1\\\"\" }` is serialized as:\n\n\t{Size:\"2\"\" x 1\"\"\"}\n\n\n## Rich support for resilience and schema versioning\nTo better illustrate the resilience of `TypeSerializer` and the JSV Format check out a real world example of it when it\u0027s used to [Painlessly migrate between old and new types in Redis](https://github.com/ServiceStack/ServiceStack.Redis/wiki/MigrationsUsingSchemalessNoSql). \n\nSupport for dynamic payloads and late-bound objects is explained in the post [Versatility of JSV Late-bound objects](http://www.servicestack.net/mythz_blog/?p=314).\n\n\n# Community Resources\n\n  - [ServiceStack.Text has nice extension method called Dump and has a few friends](http://blogs.lessthandot.com/index.php/DesktopDev/MSTech/servicestack-text-has-a-nice) by [@chrissie1](https://twitter.com/chrissie1)\n  - [JSON.NET vs ServiceStack](http://daniel.wertheim.se/2011/02/07/json-net-vs-servicestack/)\n","Hash":"e39bcf615522b4565e8bc26f99f0a43c","TargetPlatforms":["ios","android"],"TrialHash":null}